import { api, TABLES } from "./airtableClient";
import { AirtableUser, AirtableUserRole } from "@/types/airtable.ts";

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUser = async ({
                                       password,
                                       fullName,
                                       email,
                                   }: {
    password: string;
    fullName: string;
    email: string;
}): Promise<AirtableUser> => {
    console.log("AAAWJDKHJAJKWDNKJAWD")
    const existing = await findUserByEmail(email);
    if (existing) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    const created = await api(TABLES.USERS).create([{
        fields: {
            '–ü–∞—Ä–æ–ª—å': password,
            '–ü–æ–ª–Ω–æ–µ –∏–º—è': fullName,
            '–ü–æ—á—Ç–∞': email,
            '–†–æ–ª—å': "–£—á–∞—Å—Ç–Ω–∏–∫",
        }
    }]);

    return {
        "ID": created[0].id,
        '–ü–æ–ª–Ω–æ–µ –∏–º—è': created[0].fields["–ü–æ–ª–Ω–æ–µ –∏–º—è"].toString(),
        '–ü–æ—á—Ç–∞': created[0].fields["–ü–æ—á—Ç–∞"].toString(),
        '–†–æ–ª—å': created[0].fields["–†–æ–ª—å"] as AirtableUserRole
    };
};

// üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const authorizeUser = async (email: string, password: string) => {
    const user = await findUserByEmail(email);

    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    if (user.fields['–ü–∞—Ä–æ–ª—å'] !== password) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');

    return {
        id: user.id,
        fields: user.fields,
    };
};

// üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
const findUserByEmail = async (email: string) => {
    const records = await api(TABLES.USERS)
        .select({
            filterByFormula: `{–ü–æ—á—Ç–∞} = '${email}'`,
            maxRecords: 1,
        })
        .firstPage();

    return records[0] || null;
};
