import { api, TABLES } from "./airtableClient";
import { mapAirtableToTeam } from "@/types/mappers.ts";

// üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
export const findTeamsByUserId = async (userId: string) => {
    const records = await api(TABLES.TEAMS)
        .select({
            filterByFormula: `FIND("${userId}", {–£—á–∞—Å—Ç–Ω–∏–∫–∏})`,
            maxRecords: 1
        })
        .firstPage();

    return mapAirtableToTeam(records[0].fields) || null;
};

// üîç –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
export const findTeamByInviteCode = async (inviteCode: string) => {
    const records = await api(TABLES.TEAMS)
        .select({
            filterByFormula: `{–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è} = "${inviteCode}"`,
            maxRecords: 1
        })
        .firstPage();

    if (records.length === 0) {
        throw new Error("–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    return {
        recordId: records[0].id, ...mapAirtableToTeam(records[0].fields)
    };
};

// üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
export const joinTeamByInviteCode = async (inviteCode: string, userId: string) => {
    try {
        const records = await api(TABLES.USERS)
            .select({
                filterByFormula: `{ID} = "${userId}"`,
                maxRecords: 1
            })
            .firstPage();

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const team = await findTeamByInviteCode(inviteCode);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let participants = team.memberIds || [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        if (participants.includes(records[0].id)) {
            throw new Error("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants.push(records[0].id);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await api(TABLES.TEAMS).update([
            {
                id: team.recordId,
                fields: {
                    "–£—á–∞—Å—Ç–Ω–∏–∫–∏": participants
                }
            }
        ]);

        return team;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ:", error);
        throw error;
    }
};